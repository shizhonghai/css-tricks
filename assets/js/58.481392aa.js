(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{659:function(t,e,n){"use strict";n.r(e);var o=n(69),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"eventloop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[t._v("#")]),t._v(" EventLoop")]),t._v(" "),n("p",[t._v("因为javascript是单线程的脚本语言，代码自上而下执行，代码在执行时会被压入执行栈（stack）中，\n当遇到setTimeout时会将setTimeout函数交给Web API来维护，\n当异步任务（比如：setTimeout）执行完成后会将对应的回调函数推入事件队列（event queue）中，\n当执行栈中任务全部执行完成之后浏览器会读取任务队列，\n把对应的回调函数再压入执行栈中，然后循环执行。\n这就是所谓的EventLoop。")]),t._v(" "),n("p",[n("strong",[t._v("事件循环可以简单的描述为以下四个步骤:")])]),t._v(" "),n("ol",[n("li",[t._v("函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空；")]),t._v(" "),n("li",[t._v("此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）")]),t._v(" "),n("li",[t._v("执行栈为空时，Event Loop把微任务队列执行清空；")]),t._v(" "),n("li",[t._v("微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，回到第1步。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);