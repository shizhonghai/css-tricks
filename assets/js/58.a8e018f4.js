(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{666:function(e,t,v){"use strict";v.r(t);var c=v(69),_=Object(c.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"什么是react-fiber"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是react-fiber"}},[e._v("#")]),e._v(" 什么是React Fiber？")]),e._v(" "),v("p",[v("code",[e._v("JavaScript")]),e._v(" 与样式计算、界面布局等各种绘制，一起运行在浏览器的主线程中，当 "),v("code",[e._v("JavaScript")]),e._v(" 运行时间过长时，将占用整个线程，阻塞其它任务。为了能在React渲染期间回到主线程执行其它任务，在React v16中提出了 "),v("code",[e._v("Fiber Reconciler")]),e._v("，并将其设为默认的 "),v("code",[e._v("Reconciler")]),e._v("，解决了过去 "),v("code",[e._v("Stack Reconciler")]),e._v(" 中的固有问题和遗留的痛点，提高了动画、布局和手势等领域的性能。"),v("code",[e._v("Fiber Reconciler")]),e._v(" 的主要目标是：")]),e._v(" "),v("ol",[v("li",[e._v("暂停和切分渲染任务，并将分割的任务分布到各个帧中。")]),e._v(" "),v("li",[e._v("调整优先级，并重置或复用已完成的任务。")]),e._v(" "),v("li",[e._v("在父子元素之间交错处理，以支持 "),v("code",[e._v("React")]),e._v(" 中的布局。")]),e._v(" "),v("li",[e._v("在 "),v("code",[e._v("render()")]),e._v(" 方法中返回多个元素。")]),e._v(" "),v("li",[e._v("更好地支持错误边界。")])]),e._v(" "),v("p",[e._v("Fiber可以分解任务，根据优先级将任务调度到浏览器提供的两个全局函数中，如下所列：")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("requestAnimationFrame")]),e._v("：在下一个动画帧上执行高优先级的任务。")]),e._v(" "),v("li",[v("code",[e._v("requestIdleCallback")]),e._v("：在线程空闲时执行低优先级的任务。")])]),e._v(" "),v("p",[e._v("当网页保持在每秒60帧（1帧约为16ms）时，整体会变得很流畅。在每个帧中调用 "),v("code",[e._v("requestAnimationFrame()")]),e._v(" 执行高优先级的任务；而在两个帧之间会有一小段空闲时间，此时可执行 "),v("code",[e._v("requestIdleCallback()")]),e._v(" 中的任务，该函数包含一个deadline参数（截止时间），用于切分长任务。")]),e._v(" "),v("p",[e._v("参考资料《"),v("a",{attrs:{href:"https://www.kancloud.cn/pwstrick/fe-questions/1477688",target:"_blank",rel:"noopener noreferrer"}},[e._v("React源码分析"),v("OutboundLink")],1),e._v("》")]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),v("ul",[v("li",[e._v("React Fiber 是一种基于浏览器的单线程调度算法。")]),e._v(" "),v("li",[e._v("React 16之前 ，reconcilation 算法实际上是递归，想要中断递归是很困难的，React 16 开始使用了循环来代替之前的递归。")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);