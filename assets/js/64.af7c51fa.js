(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{666:function(t,e,a){"use strict";a.r(e);var s=a(69),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"说一下-react-fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-react-fiber"}},[t._v("#")]),t._v(" 说一下 React-Fiber")]),t._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("React")]),t._v(" 在进行组件渲染时，从 "),a("code",[t._v("setState")]),t._v(' 开始到渲染完成整个过程是同步的("一气呵成")。如果需要渲染的组件比较庞大，js 执行会占据主线程时间较长，会导致页面响应度变差，使得 '),a("code",[t._v("React")]),t._v(" 在动画、手势等应用中效果比较差。")]),t._v(" "),a("li",[t._v("页面卡顿："),a("code",[t._v("Stack reconciler")]),t._v(" 的工作流程很像函数的调用过程。父组件里调子组件，可以类比为函数的递归；对于特别庞大的 "),a("code",[t._v("vDOM")]),t._v(" 树来说，"),a("code",[t._v("reconciliation")]),t._v(" 过程会很长(x00ms)，超过 16ms，在这期间，主线程是被 js 占用的，因此任何交互、布局、渲染都会停止，给用户的感觉就是页面被卡住了。")])]),t._v(" "),a("h2",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIPS")]),t._v(" "),a("p",[t._v("旧版 "),a("code",[t._v("React")]),t._v(" 通过递归的方式进行渲染，使用的是 JS 引擎自身的函数调用栈，它会一直执行到栈空为止。而 "),a("code",[t._v("Fiber")]),t._v(" 实现了自己的组件调用栈，它以链表的形式遍历组件数，可以灵活的暂停、继续和丢弃执行的任务。实现方式是使用了浏览器的 "),a("code",[t._v("requestldleCallback")]),t._v(" 这一 API。"),a("code",[t._v("Fiber")]),t._v(" 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示：")])]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stateNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点实例")]),t._v("\n    child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子节点")]),t._v("\n    sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兄弟节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ol",[a("li",[a("p",[a("code",[t._v("React")]),t._v(" 内部运转分三层：")]),t._v(" "),a("ul",[a("li",[t._v("Virtual DOM 层，描述页面长什么样。")]),t._v(" "),a("li",[t._v("Reconcile 层，负责调用组件生命周期方法，进行 Diff 运算等。")]),t._v(" "),a("li",[t._v("Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 "),a("code",[t._v("ReactDOM")]),t._v(" 和 "),a("code",[t._v("ReactNative")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[t._v("为了实现不卡顿，就需要有一个调度器(Scheduler)来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如 Diff）的执行，从而更快的生效。任务的优先级有六种：")])]),t._v(" "),a("li",[a("p",[t._v("Fiber Reconciler（react）执行阶段：")]),t._v(" "),a("ul",[a("li",[t._v("阶段一，生成 Fiber 数，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。")]),t._v(" "),a("li",[t._v("阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。")])])]),t._v(" "),a("li",[a("p",[t._v("Fiber 树：Fiber Reconciler 在阶段一进行 Diff 计算的时候，会基于 Virtual DOM 数生成一颗 Fiber 数，它的本质是链表。")])]),t._v(" "),a("li",[a("p",[t._v("从 Stack Reconciler 到 Fiber Reconciler，源码层面其实就是干了一件递归改循环的事件。")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);